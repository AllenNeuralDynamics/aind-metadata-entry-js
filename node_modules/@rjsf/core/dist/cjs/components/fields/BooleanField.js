"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireDefault(require("react"));

var types = _interopRequireWildcard(require("../../types"));

var _utils = require("../../utils");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj["default"] = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function BooleanField(props) {
  var schema = props.schema,
      name = props.name,
      uiSchema = props.uiSchema,
      idSchema = props.idSchema,
      formData = props.formData,
      registry = props.registry,
      required = props.required,
      disabled = props.disabled,
      readonly = props.readonly,
      autofocus = props.autofocus,
      onChange = props.onChange,
      onFocus = props.onFocus,
      onBlur = props.onBlur,
      rawErrors = props.rawErrors;
  var title = schema.title;
  var widgets = registry.widgets,
      formContext = registry.formContext,
      fields = registry.fields;

  var _getUiOptions = (0, _utils.getUiOptions)(uiSchema),
      _getUiOptions$widget = _getUiOptions.widget,
      widget = _getUiOptions$widget === void 0 ? "checkbox" : _getUiOptions$widget,
      options = _objectWithoutProperties(_getUiOptions, ["widget"]);

  var Widget = (0, _utils.getWidget)(schema, widget, widgets);
  var enumOptions;

  if (Array.isArray(schema.oneOf)) {
    enumOptions = (0, _utils.optionsList)({
      oneOf: schema.oneOf.map(function (option) {
        return _objectSpread({}, option, {
          title: option.title || (option["const"] === true ? "Yes" : "No")
        });
      })
    });
  } else {
    enumOptions = (0, _utils.optionsList)({
      "enum": schema["enum"] || [true, false],
      enumNames: schema.enumNames || (schema["enum"] && schema["enum"][0] === false ? ["No", "Yes"] : ["Yes", "No"])
    });
  }

  return (
    /*#__PURE__*/
    _react["default"].createElement(Widget, {
      options: _objectSpread({}, options, {
        enumOptions: enumOptions
      }),
      schema: schema,
      uiSchema: uiSchema,
      id: idSchema && idSchema.$id,
      onChange: onChange,
      onFocus: onFocus,
      onBlur: onBlur,
      label: title === undefined ? name : title,
      value: formData,
      required: required,
      disabled: disabled,
      readonly: readonly,
      registry: registry,
      formContext: formContext,
      autofocus: autofocus,
      rawErrors: rawErrors,
      DescriptionField: fields.DescriptionField
    })
  );
}

if (process.env.NODE_ENV !== "production") {
  BooleanField.propTypes = types.fieldProps;
}

BooleanField.defaultProps = {
  uiSchema: {},
  disabled: false,
  readonly: false,
  autofocus: false
};
var _default = BooleanField;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL2ZpZWxkcy9Cb29sZWFuRmllbGQuanMiXSwibmFtZXMiOlsiQm9vbGVhbkZpZWxkIiwicHJvcHMiLCJzY2hlbWEiLCJuYW1lIiwidWlTY2hlbWEiLCJpZFNjaGVtYSIsImZvcm1EYXRhIiwicmVnaXN0cnkiLCJyZXF1aXJlZCIsImRpc2FibGVkIiwicmVhZG9ubHkiLCJhdXRvZm9jdXMiLCJvbkNoYW5nZSIsIm9uRm9jdXMiLCJvbkJsdXIiLCJyYXdFcnJvcnMiLCJ0aXRsZSIsIndpZGdldHMiLCJmb3JtQ29udGV4dCIsImZpZWxkcyIsIndpZGdldCIsIm9wdGlvbnMiLCJXaWRnZXQiLCJlbnVtT3B0aW9ucyIsIkFycmF5IiwiaXNBcnJheSIsIm9uZU9mIiwibWFwIiwib3B0aW9uIiwiZW51bU5hbWVzIiwiJGlkIiwidW5kZWZpbmVkIiwiRGVzY3JpcHRpb25GaWVsZCIsInByb2Nlc3MiLCJlbnYiLCJOT0RFX0VOViIsInByb3BUeXBlcyIsInR5cGVzIiwiZmllbGRQcm9wcyIsImRlZmF1bHRQcm9wcyJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUNBOztBQUVBOzs7Ozs7Ozs7Ozs7OztBQUVBLFNBQVNBLFlBQVQsQ0FBc0JDLEtBQXRCLEVBQTZCO0FBQUEsTUFFekJDLE1BRnlCLEdBZ0J2QkQsS0FoQnVCLENBRXpCQyxNQUZ5QjtBQUFBLE1BR3pCQyxJQUh5QixHQWdCdkJGLEtBaEJ1QixDQUd6QkUsSUFIeUI7QUFBQSxNQUl6QkMsUUFKeUIsR0FnQnZCSCxLQWhCdUIsQ0FJekJHLFFBSnlCO0FBQUEsTUFLekJDLFFBTHlCLEdBZ0J2QkosS0FoQnVCLENBS3pCSSxRQUx5QjtBQUFBLE1BTXpCQyxRQU55QixHQWdCdkJMLEtBaEJ1QixDQU16QkssUUFOeUI7QUFBQSxNQU96QkMsUUFQeUIsR0FnQnZCTixLQWhCdUIsQ0FPekJNLFFBUHlCO0FBQUEsTUFRekJDLFFBUnlCLEdBZ0J2QlAsS0FoQnVCLENB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QUVQLFNBZmI7QUFnQkUsTUFBQSxTQUFTLEVBQUVJLFNBaEJiO0FBaUJFLE1BQUEsZ0JBQWdCLEVBQUVJLE1BQU0sQ0FBQ2E7QUFqQjNCO0FBREY7QUFxQkQ7O0FBRUQsSUFBSUMsT0FBTyxDQUFDQyxHQUFSLENBQVlDLFFBQVosS0FBeUIsWUFBN0IsRUFBMkM7QUFDekNuQyxFQUFBQSxZQUFZLENBQUNvQyxTQUFiLEdBQXlCQyxLQUFLLENBQUNDLFVBQS9CO0FBQ0Q7O0FBRUR0QyxZQUFZLENBQUN1QyxZQUFiLEdBQTRCO0FBQzFCbkMsRUFBQUEsUUFBUSxFQUFFLEVBRGdCO0FBRTFCSyxFQUFBQSxRQUFRLEVBQUUsS0FGZ0I7QUFHMUJDLEVBQUFBLFFBQVEsRUFBRSxLQUhnQjtBQUkxQkMsRUFBQUEsU0FBUyxFQUFFO0FBSmUsQ0FBNUI7ZUFPZVgsWSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCAqIGFzIHR5cGVzIGZyb20gXCIuLi8uLi90eXBlc1wiO1xuXG5pbXBvcnQgeyBnZXRXaWRnZXQsIGdldFVpT3B0aW9ucywgb3B0aW9uc0xpc3QgfSBmcm9tIFwiLi4vLi4vdXRpbHNcIjtcblxuZnVuY3Rpb24gQm9vbGVhbkZpZWxkKHByb3BzKSB7XG4gIGNvbnN0IHtcbiAgICBzY2hlbWEsXG4gICAgbmFtZSxcbiAgICB1aVNjaGVtYSxcbiAgICBpZFNjaGVtYSxcbiAgICBmb3JtRGF0YSxcbiAgICByZWdpc3RyeSxcbiAgICByZXF1aXJlZCxcbiAgICBkaXNhYmxlZCxcbiAgICByZWFkb25seSxcbiAgICBhdXRvZm9jdXMsXG4gICAgb25DaGFuZ2UsXG4gICAgb25Gb2N1cyxcbiAgICBvbkJsdXIsXG4gICAgcmF3RXJyb3JzLFxuICB9ID0gcHJvcHM7XG4gIGNvbnN0IHsgdGl0bGUgfSA9IHNjaGVtYTtcbiAgY29uc3QgeyB3aWRnZXRzLCBmb3JtQ29udGV4dCwgZmllbGRzIH0gPSByZWdpc3RyeTtcbiAgY29uc3QgeyB3aWRnZXQgPSBcImNoZWNrYm94XCIsIC4uLm9wdGlvbnMgfSA9IGdldFVpT3B0aW9ucyh1aVNjaGVtYSk7XG4gIGNvbnN0IFdpZGdldCA9IGdldFdpZGdldChzY2hlbWEsIHdpZGdldCwgd2lkZ2V0cyk7XG5cbiAgbGV0IGVudW1PcHRpb25zO1xuXG4gIGlmIChBcnJheS5pc0FycmF5KHNjaGVtYS5vbmVPZikpIHtcbiAgICBlbnVtT3B0aW9ucyA9IG9wdGlvbnNMaXN0KHtcbiAgICAgIG9uZU9mOiBzY2hlbWEub25lT2YubWFwKG9wdGlvbiA9PiAoe1xuICAgICAgICAuLi5vcHRpb24sXG4gICAgICAgIHRpdGxlOiBvcHRpb24udGl0bGUgfHwgKG9wdGlvbi5jb25zdCA9PT0gdHJ1ZSA/IFwiWWVzXCIgOiBcIk5vXCIpLFxuICAgICAgfSkpLFxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIGVudW1PcHRpb25zID0gb3B0aW9uc0xpc3Qoe1xuICAgICAgZW51bTogc2NoZW1hLmVudW0gfHwgW3RydWUsIGZhbHNlXSxcbiAgICAgIGVudW1OYW1lczpcbiAgICAgICAgc2NoZW1hLmVudW1OYW1lcyB8fFxuICAgICAgICAoc2NoZW1hLmVudW0gJiYgc2NoZW1hLmVudW1bMF0gPT09IGZhbHNlXG4gICAgICAgICAgPyBbXCJOb1wiLCBcIlllc1wiXVxuICAgICAgICAgIDogW1wiWWVzXCIsIFwiTm9cIl0pLFxuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIChcbiAgICA8V2lkZ2V0XG4gICAgICBvcHRpb25zPXt7IC4uLm9wdGlvbnMsIGVudW1PcHRpb25zIH19XG4gICAgICBzY2hlbWE9e3NjaGVtYX1cbiAgICAgIHVpU2NoZW1hPXt1aVNjaGVtYX1cbiAgICAgIGlkPXtpZFNjaGVtYSAmJiBpZFNjaGVtYS4kaWR9XG4gICAgICBvbkNoYW5nZT17b25DaGFuZ2V9XG4gICAgICBvbkZvY3VzPXtvbkZvY3VzfVxuICAgICAgb25CbHVyPXtvbkJsdXJ9XG4gICAgICBsYWJlbD17dGl0bGUgPT09IHVuZGVmaW5lZCA/IG5hbWUgOiB0aXRsZX1cbiAgICAgIHZhbHVlPXtmb3JtRGF0YX1cbiAgICAgIHJlcXVpcmVkPXtyZXF1aXJlZH1cbiAgICAgIGRpc2FibGVkPXtkaXNhYmxlZH1cbiAgICAgIHJlYWRvbmx5PXtyZWFkb25seX1cbiAgICAgIHJlZ2lzdHJ5PXtyZWdpc3RyeX1cbiAgICAgIGZvcm1Db250ZXh0PXtmb3JtQ29udGV4dH1cbiAgICAgIGF1dG9mb2N1cz17YXV0b2ZvY3VzfVxuICAgICAgcmF3RXJyb3JzPXtyYXdFcnJvcnN9XG4gICAgICBEZXNjcmlwdGlvbkZpZWxkPXtmaWVsZHMuRGVzY3JpcHRpb25GaWVsZH1cbiAgICAvPlxuICApO1xufVxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIEJvb2xlYW5GaWVsZC5wcm9wVHlwZXMgPSB0eXBlcy5maWVsZFByb3BzO1xufVxuXG5Cb29sZWFuRmllbGQuZGVmYXVsdFByb3BzID0ge1xuICB1aVNjaGVtYToge30sXG4gIGRpc2FibGVkOiBmYWxzZSxcbiAgcmVhZG9ubHk6IGZhbHNlLFxuICBhdXRvZm9jdXM6IGZhbHNlLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgQm9vbGVhbkZpZWxkO1xuIl19