"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function RadioWidget(props) {
  var options = props.options,
      value = props.value,
      required = props.required,
      disabled = props.disabled,
      readonly = props.readonly,
      autofocus = props.autofocus,
      onBlur = props.onBlur,
      onFocus = props.onFocus,
      _onChange = props.onChange,
      id = props.id; // Generating a unique field name to identify this set of radio buttons

  var name = Math.random().toString();
  var enumOptions = options.enumOptions,
      enumDisabled = options.enumDisabled,
      inline = options.inline; // checked={checked} has been moved above name={name}, As mentioned in #349;
  // this is a temporary fix for radio button rendering bug in React, facebook/react#7630.

  return (
    /*#__PURE__*/
    _react["default"].createElement("div", {
      className: "field-radio-group",
      id: id
    }, enumOptions.map(function (option, i) {
      var checked = option.value === value;
      var itemDisabled = enumDisabled && enumDisabled.indexOf(option.value) != -1;
      var disabledCls = disabled || itemDisabled || readonly ? "disabled" : "";

      var radio =
      /*#__PURE__*/
      _react["default"].createElement("span", null,
      /*#__PURE__*/
      _react["default"].createElement("input", {
        type: "radio",
        checked: checked,
        name: name,
        required: required,
        value: option.value,
        disabled: disabled || itemDisabled || readonly,
        autoFocus: autofocus && i === 0,
        onChange: function onChange(_) {
          return _onChange(option.value);
        },
        onBlur: onBlur && function (event) {
          return onBlur(id, event.target.value);
        },
        onFocus: onFocus && function (event) {
          return onFocus(id, event.target.value);
        }
      }),
      /*#__PURE__*/
      _react["default"].createElement("span", null, option.label));

      return inline ?
      /*#__PURE__*/
      _react["default"].createElement("label", {
        key: i,
        className: "radio-inline ".concat(disabledCls)
      }, radio) :
      /*#__PURE__*/
      _react["default"].createElement("div", {
        key: i,
        className: "radio ".concat(disabledCls)
      },
      /*#__PURE__*/
      _react["default"].createElement("label", null, radio));
    }))
  );
}

RadioWidget.defaultProps = {
  autofocus: false
};

if (process.env.NODE_ENV !== "production") {
  RadioWidget.propTypes = {
    schema: _propTypes["default"].object.isRequired,
    id: _propTypes["default"].string.isRequired,
    options: _propTypes["default"].shape({
      enumOptions: _propTypes["default"].array,
      inline: _propTypes["default"].bool
    }).isRequired,
    value: _propTypes["default"].any,
    required: _propTypes["default"].bool,
    disabled: _propTypes["default"].bool,
    readonly: _propTypes["default"].bool,
    autofocus: _propTypes["default"].bool,
    onChange: _propTypes["default"].func
  };
}

var _default = RadioWidget;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3dpZGdldHMvUmFkaW9XaWRnZXQuanMiXSwibmFtZXMiOlsiUmFkaW9XaWRnZXQiLCJwcm9wcyIsIm9wdGlvbnMiLCJ2YWx1ZSIsInJlcXVpcmVkIiwiZGlzYWJsZWQiLCJyZWFkb25seSIsImF1dG9mb2N1cyIsIm9uQmx1ciIsIm9uRm9jdXMiLCJvbkNoYW5nZSIsImlkIiwibmFtZSIsIk1hdGgiLCJyYW5kb20iLCJ0b1N0cmluZyIsImVudW1PcHRpb25zIiwiZW51bURpc2FibGVkIiwiaW5saW5lIiwibWFwIiwib3B0aW9uIiwiaSIsImNoZWNrZWQiLCJpdGVtRGlzYWJsZWQiLCJpbmRleE9mIiwiZGlzYWJsZWRDbHMiLCJyYWRpbyIsIl8iLCJldmVudCIsInRhcmdldCIsImxhYmVsIiwiZGVmYXVsdFByb3BzIiwicHJvY2VzcyIsImVudiIsIk5PREVfRU5WIiwicHJvcFR5cGVzIiwic2NoZW1hIiwiUHJvcFR5cGVzIiwib2JqZWN0IiwiaXNSZXF1aXJlZCIsInN0cmluZyIsInNoYXBlIiwiYXJyYXkiLCJib29sIiwiYW55IiwiZnVuYyJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUNBOzs7O0FBRUEsU0FBU0EsV0FBVCxDQUFxQkMsS0FBckIsRUFBNEI7QUFBQSxNQUV4QkMsT0FGd0IsR0FZdEJELEtBWnNCLENBRXhCQyxPQUZ3QjtBQUFBLE1BR3hCQyxLQUh3QixHQVl0QkYsS0Fac0IsQ0FHeEJFLEtBSHdCO0FBQUEsTUFJeEJDLFFBSndCLEdBWXRCSCxLQVpzQixDQUl4QkcsUUFKd0I7QUFBQSxNQUt4QkMsUUFMd0IsR0FZdEJKLEtBWnNCLENBS3hCSSxRQUx3QjtBQUFBLE1BTXhCQyxRQU53QixHQVl0QkwsS0Fac0IsQ0FNeEJLLFFBTndCO0FBQUEsTUFPeEJDLFNBUHdCLEdBWXRCTixLQVpzQixDQU94Qk0sU0FQd0I7QUFBQSxNQVF4QkMsTUFSd0IsR0FZdEJQLEtBWnNCLENBUXhCTyxNQVJ3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SUFBQUEsRUFBRSxFQUFFMEIsc0JBQVVHLE1BQVYsQ0FBaUJELFVBRkM7QUFHdEJyQyxJQUFBQSxPQUFPLEVBQUVtQyxzQkFBVUksS0FBVixDQUFnQjtBQUN2QnpCLE1BQUFBLFdBQVcsRUFBRXFCLHNCQUFVSyxLQURBO0FBRXZCeEIsTUFBQUEsTUFBTSxFQUFFbUIsc0JBQVVNO0FBRkssS0FBaEIsRUFHTkosVUFObUI7QUFPdEJwQyxJQUFBQSxLQUFLLEVBQUVrQyxzQkFBVU8sR0FQSztBQVF0QnhDLElBQUFBLFFBQVEsRUFBRWlDLHNCQUFVTSxJQVJFO0FBU3RCdEMsSUFBQUEsUUFBUSxFQUFFZ0Msc0JBQVVNLElBVEU7QUFVdEJyQyxJQUFBQSxRQUFRLEVBQUUrQixzQkFBVU0sSUFWRTtBQVd0QnBDLElBQUFBLFNBQVMsRUFBRThCLHNCQUFVTSxJQVhDO0FBWXRCakMsSUFBQUEsUUFBUSxFQUFFMkIsc0JBQVVRO0FBWkUsR0FBeEI7QUFjRDs7ZUFDYzdDLFciLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gXCJwcm9wLXR5cGVzXCI7XG5cbmZ1bmN0aW9uIFJhZGlvV2lkZ2V0KHByb3BzKSB7XG4gIGNvbnN0IHtcbiAgICBvcHRpb25zLFxuICAgIHZhbHVlLFxuICAgIHJlcXVpcmVkLFxuICAgIGRpc2FibGVkLFxuICAgIHJlYWRvbmx5LFxuICAgIGF1dG9mb2N1cyxcbiAgICBvbkJsdXIsXG4gICAgb25Gb2N1cyxcbiAgICBvbkNoYW5nZSxcbiAgICBpZCxcbiAgfSA9IHByb3BzO1xuICAvLyBHZW5lcmF0aW5nIGEgdW5pcXVlIGZpZWxkIG5hbWUgdG8gaWRlbnRpZnkgdGhpcyBzZXQgb2YgcmFkaW8gYnV0dG9uc1xuICBjb25zdCBuYW1lID0gTWF0aC5yYW5kb20oKS50b1N0cmluZygpO1xuICBjb25zdCB7IGVudW1PcHRpb25zLCBlbnVtRGlzYWJsZWQsIGlubGluZSB9ID0gb3B0aW9ucztcbiAgLy8gY2hlY2tlZD17Y2hlY2tlZH0gaGFzIGJlZW4gbW92ZWQgYWJvdmUgbmFtZT17bmFtZX0sIEFzIG1lbnRpb25lZCBpbiAjMzQ5O1xuICAvLyB0aGlzIGlzIGEgdGVtcG9yYXJ5IGZpeCBmb3IgcmFkaW8gYnV0dG9uIHJlbmRlcmluZyBidWcgaW4gUmVhY3QsIGZhY2Vib29rL3JlYWN0Izc2MzAuXG4gIHJldHVybiAoXG4gICAgPGRpdiBjbGFzc05hbWU9XCJmaWVsZC1yYWRpby1ncm91cFwiIGlkPXtpZH0+XG4gICAgICB7ZW51bU9wdGlvbnMubWFwKChvcHRpb24sIGkpID0+IHtcbiAgICAgICAgY29uc3QgY2hlY2tlZCA9IG9wdGlvbi52YWx1ZSA9PT0gdmFsdWU7XG4gICAgICAgIGNvbnN0IGl0ZW1EaXNhYmxlZCA9XG4gICAgICAgICAgZW51bURpc2FibGVkICYmIGVudW1EaXNhYmxlZC5pbmRleE9mKG9wdGlvbi52YWx1ZSkgIT0gLTE7XG4gICAgICAgIGNvbnN0IGRpc2FibGVkQ2xzID1cbiAgICAgICAgICBkaXNhYmxlZCB8fCBpdGVtRGlzYWJsZWQgfHwgcmVhZG9ubHkgPyBcImRpc2FibGVkXCIgOiBcIlwiO1xuICAgICAgICBjb25zdCByYWRpbyA9IChcbiAgICAgICAgICA8c3Bhbj5cbiAgICAgICAgICAgIDxpbnB1dFxuICAgICAgICAgICAgICB0eXBlPVwicmFkaW9cIlxuICAgICAgICAgICAgICBjaGVja2VkPXtjaGVja2VkfVxuICAgICAgICAgICAgICBuYW1lPXtuYW1lfVxuICAgICAgICAgICAgICByZXF1aXJlZD17cmVxdWlyZWR9XG4gICAgICAgICAgICAgIHZhbHVlPXtvcHRpb24udmFsdWV9XG4gICAgICAgICAgICAgIGRpc2FibGVkPXtkaXNhYmxlZCB8fCBpdGVtRGlzYWJsZWQgfHwgcmVhZG9ubHl9XG4gICAgICAgICAgICAgIGF1dG9Gb2N1cz17YXV0b2ZvY3VzICYmIGkgPT09IDB9XG4gICAgICAgICAgICAgIG9uQ2hhbmdlPXtfID0+IG9uQ2hhbmdlKG9wdGlvbi52YWx1ZSl9XG4gICAgICAgICAgICAgIG9uQmx1cj17b25CbHVyICYmIChldmVudCA9PiBvbkJsdXIoaWQsIGV2ZW50LnRhcmdldC52YWx1ZSkpfVxuICAgICAgICAgICAgICBvbkZvY3VzPXtvbkZvY3VzICYmIChldmVudCA9PiBvbkZvY3VzKGlkLCBldmVudC50YXJnZXQudmFsdWUpKX1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8c3Bhbj57b3B0aW9uLmxhYmVsfTwvc3Bhbj5cbiAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICk7XG5cbiAgICAgICAgcmV0dXJuIGlubGluZSA/IChcbiAgICAgICAgICA8bGFiZWwga2V5PXtpfSBjbGFzc05hbWU9e2ByYWRpby1pbmxpbmUgJHtkaXNhYmxlZENsc31gfT5cbiAgICAgICAgICAgIHtyYWRpb31cbiAgICAgICAgICA8L2xhYmVsPlxuICAgICAgICApIDogKFxuICAgICAgICAgIDxkaXYga2V5PXtpfSBjbGFzc05hbWU9e2ByYWRpbyAke2Rpc2FibGVkQ2xzfWB9PlxuICAgICAgICAgICAgPGxhYmVsPntyYWRpb308L2xhYmVsPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICApO1xuICAgICAgfSl9XG4gICAgPC9kaXY+XG4gICk7XG59XG5cblJhZGlvV2lkZ2V0LmRlZmF1bHRQcm9wcyA9IHtcbiAgYXV0b2ZvY3VzOiBmYWxzZSxcbn07XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgUmFkaW9XaWRnZXQucHJvcFR5cGVzID0ge1xuICAgIHNjaGVtYTogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICAgIGlkOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gICAgb3B0aW9uczogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICAgIGVudW1PcHRpb25zOiBQcm9wVHlwZXMuYXJyYXksXG4gICAgICBpbmxpbmU6IFByb3BUeXBlcy5ib29sLFxuICAgIH0pLmlzUmVxdWlyZWQsXG4gICAgdmFsdWU6IFByb3BUeXBlcy5hbnksXG4gICAgcmVxdWlyZWQ6IFByb3BUeXBlcy5ib29sLFxuICAgIGRpc2FibGVkOiBQcm9wVHlwZXMuYm9vbCxcbiAgICByZWFkb25seTogUHJvcFR5cGVzLmJvb2wsXG4gICAgYXV0b2ZvY3VzOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBvbkNoYW5nZTogUHJvcFR5cGVzLmZ1bmMsXG4gIH07XG59XG5leHBvcnQgZGVmYXVsdCBSYWRpb1dpZGdldDtcbiJdfQ==