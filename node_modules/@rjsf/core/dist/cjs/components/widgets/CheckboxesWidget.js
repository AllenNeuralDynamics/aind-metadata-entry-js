"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function selectValue(value, selected, all) {
  var at = all.indexOf(value);
  var updated = selected.slice(0, at).concat(value, selected.slice(at)); // As inserting values at predefined index positions doesn't work with empty
  // arrays, we need to reorder the updated selection to match the initial order

  return updated.sort(function (a, b) {
    return all.indexOf(a) > all.indexOf(b);
  });
}

function deselectValue(value, selected) {
  return selected.filter(function (v) {
    return v !== value;
  });
}

function CheckboxesWidget(props) {
  var id = props.id,
      disabled = props.disabled,
      options = props.options,
      value = props.value,
      autofocus = props.autofocus,
      readonly = props.readonly,
      _onChange = props.onChange;
  var enumOptions = options.enumOptions,
      enumDisabled = options.enumDisabled,
      inline = options.inline;
  return (
    /*#__PURE__*/
    _react["default"].createElement("div", {
      className: "checkboxes",
      id: id
    }, enumOptions.map(function (option, index) {
      var checked = value.indexOf(option.value) !== -1;
      var itemDisabled = enumDisabled && enumDisabled.indexOf(option.value) != -1;
      var disabledCls = disabled || itemDisabled || readonly ? "disabled" : "";

      var checkbox =
      /*#__PURE__*/
      _react["default"].createElement("span", null,
      /*#__PURE__*/
      _react["default"].createElement("input", {
        type: "checkbox",
        id: "".concat(id, "_").concat(index),
        checked: checked,
        disabled: disabled || itemDisabled || readonly,
        autoFocus: autofocus && index === 0,
        onChange: function onChange(event) {
          var all = enumOptions.map(function (_ref) {
            var value = _ref.value;
            return value;
          });

          if (event.target.checked) {
            _onChange(selectValue(option.value, value, all));
          } else {
            _onChange(deselectValue(option.value, value));
          }
        }
      }),
      /*#__PURE__*/
      _react["default"].createElement("span", null, option.label));

      return inline ?
      /*#__PURE__*/
      _react["default"].createElement("label", {
        key: index,
        className: "checkbox-inline ".concat(disabledCls)
      }, checkbox) :
      /*#__PURE__*/
      _react["default"].createElement("div", {
        key: index,
        className: "checkbox ".concat(disabledCls)
      },
      /*#__PURE__*/
      _react["default"].createElement("label", null, checkbox));
    }))
  );
}

CheckboxesWidget.defaultProps = {
  autofocus: false,
  options: {
    inline: false
  }
};

if (process.env.NODE_ENV !== "production") {
  CheckboxesWidget.propTypes = {
    schema: _propTypes["default"].object.isRequired,
    id: _propTypes["default"].string.isRequired,
    options: _propTypes["default"].shape({
      enumOptions: _propTypes["default"].array,
      inline: _propTypes["default"].bool
    }).isRequired,
    value: _propTypes["default"].any,
    required: _propTypes["default"].bool,
    readonly: _propTypes["default"].bool,
    disabled: _propTypes["default"].bool,
    multiple: _propTypes["default"].bool,
    autofocus: _propTypes["default"].bool,
    onChange: _propTypes["default"].func
  };
}

var _default = CheckboxesWidget;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,