export default Form;
import withTheme from "./withTheme";
export const utils: {
    getDefaultRegistry: typeof getDefaultRegistry;
    canExpand(schema: any, uiSchema: any, formData: any): any;
    getSchemaType(schema: any): any;
    getWidget(schema: any, widget: any, registeredWidgets?: {}): any;
    hasWidget(schema: any, widget: any, registeredWidgets?: {}): boolean;
    getDefaultFormState(_schema: any, formData: any, rootSchema?: {}, includeUndefinedValues?: boolean): any;
    mergeDefaultsWithFormData(defaults: any, formData: any): any;
    getUiOptions(uiSchema: any): {};
    getSubmitButtonOptions(uiSchema: any): any;
    getDisplayLabel(schema: any, uiSchema: any, rootSchema: any): any;
    isObject(thing: any): boolean;
    mergeObjects(obj1: any, obj2: any, concatArrays?: boolean): any;
    asNumber(value: any): any;
    orderProperties(properties: any, order: any): any;
    isConstant(schema: any): any;
    toConstant(schema: any): any;
    isSelect(_schema: any, rootSchema?: {}): boolean;
    isMultiSelect(schema: any, rootSchema?: {}): boolean;
    isFilesArray(schema: any, uiSchema: any, rootSchema?: {}): boolean;
    isFixedItems(schema: any): any;
    isCustomWidget(uiSchema: any): boolean;
    allowAdditionalItems(schema: any): boolean;
    optionsList(schema: any): any;
    findSchemaDefinition($ref: any, rootSchema?: {}): any;
    stubExistingAdditionalProperties(schema: any, rootSchema?: {}, formData?: {}): any;
    resolveSchema(schema: any, rootSchema?: {}, formData?: {}): any;
    retrieveSchema(schema: any, rootSchema?: {}, formData?: {}): any;
    mergeSchemas(obj1: any, obj2: any): any;
    deepEquals(a: any, b: any, ca?: any[], cb?: any[]): any;
    shouldRender(comp: any, nextProps: any, nextState: any): boolean;
    toIdSchema(schema: any, id: any, rootSchema: any, formData?: {}, idPrefix?: string, idSeparator?: string): any;
    toPathSchema(schema: any, name: string | undefined, rootSchema: any, formData?: {}): any;
    parseDateString(dateString: any, includeTime?: boolean): {
        year: number;
        month: number;
        day: number;
        hour: number;
        minute: number;
        second: number;
    };
    toDateString({ year, month, day, hour, minute, second }: {
        year: any;
        month: any;
        day: any;
        hour?: number | undefined;
        minute?: number | undefined;
        second?: number | undefined;
    }, time?: boolean): string;
    utcToLocal(jsonDate: any): string;
    localToUTC(dateString: any): string | undefined;
    pad(num: any, size: any): string;
    dataURItoBlob(dataURI: any): {
        blob: Blob;
        name: any;
    };
    rangeSpec(schema: any): {
        step: any;
        min: any;
        max: any;
    };
    getMatchingOption(formData: any, options: any, rootSchema: any): number;
    schemaRequiresTrueValue(schema: any): any;
    ADDITIONAL_PROPERTY_FLAG: "__additional_property";
    guessType: (value: any) => "array" | "string" | "null" | "boolean" | "number" | "object";
};
import Form from "./components/Form";
import { getDefaultRegistry } from "./defaultRegistry";
export { withTheme };
