import React from "react";
import PropTypes from "prop-types";

function selectValue(value, selected, all) {
  var at = all.indexOf(value);
  var updated = selected.slice(0, at).concat(value, selected.slice(at)); // As inserting values at predefined index positions doesn't work with empty
  // arrays, we need to reorder the updated selection to match the initial order

  return updated.sort(function (a, b) {
    return all.indexOf(a) > all.indexOf(b);
  });
}

function deselectValue(value, selected) {
  return selected.filter(function (v) {
    return v !== value;
  });
}

function CheckboxesWidget(props) {
  var id = props.id,
      disabled = props.disabled,
      options = props.options,
      value = props.value,
      autofocus = props.autofocus,
      readonly = props.readonly,
      _onChange = props.onChange;
  var enumOptions = options.enumOptions,
      enumDisabled = options.enumDisabled,
      inline = options.inline;
  return (
    /*#__PURE__*/
    React.createElement("div", {
      className: "checkboxes",
      id: id
    }, enumOptions.map(function (option, index) {
      var checked = value.indexOf(option.value) !== -1;
      var itemDisabled = enumDisabled && enumDisabled.indexOf(option.value) != -1;
      var disabledCls = disabled || itemDisabled || readonly ? "disabled" : "";
      var checkbox =
      /*#__PURE__*/
      React.createElement("span", null,
      /*#__PURE__*/
      React.createElement("input", {
        type: "checkbox",
        id: "".concat(id, "_").concat(index),
        checked: checked,
        disabled: disabled || itemDisabled || readonly,
        autoFocus: autofocus && index === 0,
        onChange: function onChange(event) {
          var all = enumOptions.map(function (_ref) {
            var value = _ref.value;
            return value;
          });

          if (event.target.checked) {
            _onChange(selectValue(option.value, value, all));
          } else {
            _onChange(deselectValue(option.value, value));
          }
        }
      }),
      /*#__PURE__*/
      React.createElement("span", null, option.label));
      return inline ?
      /*#__PURE__*/
      React.createElement("label", {
        key: index,
        className: "checkbox-inline ".concat(disabledCls)
      }, checkbox) :
      /*#__PURE__*/
      React.createElement("div", {
        key: index,
        className: "checkbox ".concat(disabledCls)
      },
      /*#__PURE__*/
      React.createElement("label", null, checkbox));
    }))
  );
}

CheckboxesWidget.defaultProps = {
  autofocus: false,
  options: {
    inline: false
  }
};

if (process.env.NODE_ENV !== "production") {
  CheckboxesWidget.propTypes = {
    schema: PropTypes.object.isRequired,
    id: PropTypes.string.isRequired,
    options: PropTypes.shape({
      enumOptions: PropTypes.array,
      inline: PropTypes.bool
    }).isRequired,
    value: PropTypes.any,
    required: PropTypes.bool,
    readonly: PropTypes.bool,
    disabled: PropTypes.bool,
    multiple: PropTypes.bool,
    autofocus: PropTypes.bool,
    onChange: PropTypes.func
  };
}

export default CheckboxesWidget;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3dpZGdldHMvQ2hlY2tib3hlc1dpZGdldC5qcyJdLCJuYW1lcyI6WyJSZWFjdCIsIlByb3BUeXBlcyIsInNlbGVjdFZhbHVlIiwidmFsdWUiLCJzZWxlY3RlZCIsImFsbCIsImF0IiwiaW5kZXhPZiIsInVwZGF0ZWQiLCJzbGljZSIsImNvbmNhdCIsInNvcnQiLCJhIiwiYiIsImRlc2VsZWN0VmFsdWUiLCJmaWx0ZXIiLCJ2IiwiQ2hlY2tib3hlc1dpZGdldCIsInByb3BzIiwiaWQiLCJkaXNhYmxlZCIsIm9wdGlvbnMiLCJhdXRvZm9jdXMiLCJyZWFkb25seSIsIm9uQ2hhbmdlIiwiZW51bU9wdGlvbnMiLCJlbnVtRGlzYWJsZWQiLCJpbmxpbmUiLCJtYXAiLCJvcHRpb24iLCJpbmRleCIsImNoZWNrZWQiLCJpdGVtRGlzYWJsZWQiLCJkaXNhYmxlZENscyIsImNoZWNrYm94IiwiZXZlbnQiLCJ0YXJnZXQiLCJsYWJlbCIsImRlZmF1bHRQcm9wcyIsInByb2Nlc3MiLCJlbnYiLCJOT0RFX0VOViIsInByb3BUeXBlcyIsInNjaGVtYSIsIm9iamVjdCIsImlzUmVxdWlyZWQiLCJzdHJpbmciLCJzaGFwZSIsImFycmF5IiwiYm9vbCIsImFueSIsInJlcXVpcmVkIiwibXVsdGlwbGUiLCJmdW5jIl0sIm1hcHBpbmdzIjoiQUFBQSxPQUFPQSxLQUFQLE1BQWtCLE9BQWxCO0FBQ0EsT0FBT0MsU0FBUCxNQUFzQixZQUF0Qjs7QUFFQSxTQUFTQyxXQUFULENBQXFCQyxLQUFyQixFQUE0QkMsUUFBNUIsRUFBc0NDLEdBQXRDLEVBQTJDO0FBQ3pDLE1BQU1DLEVBQUUsR0FBR0QsR0FBRyxDQUFDRSxPQUFKLENBQVlKLEtBQVosQ0FBWDtBQUNBLE1BQU1LLE9BQU8sR0FBR0osUUFBUSxDQUFDSyxLQUFULENBQWUsQ0FBZixFQUFrQkgsRUFBbEIsRUFBc0JJLE1BQXRCLENBQTZCUCxLQUE3QixFQUFvQ0MsUUFBUSxDQUFD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RUFBRW5CLFNBQVMsQ0FBQ2dELElBVk87QUFXM0JHLElBQUFBLFFBQVEsRUFBRW5ELFNBQVMsQ0FBQ2dELElBWE87QUFZM0IzQixJQUFBQSxTQUFTLEVBQUVyQixTQUFTLENBQUNnRCxJQVpNO0FBYTNCekIsSUFBQUEsUUFBUSxFQUFFdkIsU0FBUyxDQUFDb0Q7QUFiTyxHQUE3QjtBQWVEOztBQUVELGVBQWVwQyxnQkFBZiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSBcInByb3AtdHlwZXNcIjtcblxuZnVuY3Rpb24gc2VsZWN0VmFsdWUodmFsdWUsIHNlbGVjdGVkLCBhbGwpIHtcbiAgY29uc3QgYXQgPSBhbGwuaW5kZXhPZih2YWx1ZSk7XG4gIGNvbnN0IHVwZGF0ZWQgPSBzZWxlY3RlZC5zbGljZSgwLCBhdCkuY29uY2F0KHZhbHVlLCBzZWxlY3RlZC5zbGljZShhdCkpO1xuICAvLyBBcyBpbnNlcnRpbmcgdmFsdWVzIGF0IHByZWRlZmluZWQgaW5kZXggcG9zaXRpb25zIGRvZXNuJ3Qgd29yayB3aXRoIGVtcHR5XG4gIC8vIGFycmF5cywgd2UgbmVlZCB0byByZW9yZGVyIHRoZSB1cGRhdGVkIHNlbGVjdGlvbiB0byBtYXRjaCB0aGUgaW5pdGlhbCBvcmRlclxuICByZXR1cm4gdXBkYXRlZC5zb3J0KChhLCBiKSA9PiBhbGwuaW5kZXhPZihhKSA+IGFsbC5pbmRleE9mKGIpKTtcbn1cblxuZnVuY3Rpb24gZGVzZWxlY3RWYWx1ZSh2YWx1ZSwgc2VsZWN0ZWQpIHtcbiAgcmV0dXJuIHNlbGVjdGVkLmZpbHRlcih2ID0+IHYgIT09IHZhbHVlKTtcbn1cblxuZnVuY3Rpb24gQ2hlY2tib3hlc1dpZGdldChwcm9wcykge1xuICBjb25zdCB7IGlkLCBkaXNhYmxlZCwgb3B0aW9ucywgdmFsdWUsIGF1dG9mb2N1cywgcmVhZG9ubHksIG9uQ2hhbmdlIH0gPSBwcm9wcztcbiAgY29uc3QgeyBlbnVtT3B0aW9ucywgZW51bURpc2FibGVkLCBpbmxpbmUgfSA9IG9wdGlvbnM7XG4gIHJldHVybiAoXG4gICAgPGRpdiBjbGFzc05hbWU9XCJjaGVja2JveGVzXCIgaWQ9e2lkfT5cbiAgICAgIHtlbnVtT3B0aW9ucy5tYXAoKG9wdGlvbiwgaW5kZXgpID0+IHtcbiAgICAgICAgY29uc3QgY2hlY2tlZCA9IHZhbHVlLmluZGV4T2Yob3B0aW9uLnZhbHVlKSAhPT0gLTE7XG4gICAgICAgIGNvbnN0IGl0ZW1EaXNhYmxlZCA9XG4gICAgICAgICAgZW51bURpc2FibGVkICYmIGVudW1EaXNhYmxlZC5pbmRleE9mKG9wdGlvbi52YWx1ZSkgIT0gLTE7XG4gICAgICAgIGNvbnN0IGRpc2FibGVkQ2xzID1cbiAgICAgICAgICBkaXNhYmxlZCB8fCBpdGVtRGlzYWJsZWQgfHwgcmVhZG9ubHkgPyBcImRpc2FibGVkXCIgOiBcIlwiO1xuICAgICAgICBjb25zdCBjaGVja2JveCA9IChcbiAgICAgICAgICA8c3Bhbj5cbiAgICAgICAgICAgIDxpbnB1dFxuICAgICAgICAgICAgICB0eXBlPVwiY2hlY2tib3hcIlxuICAgICAgICAgICAgICBpZD17YCR7aWR9XyR7aW5kZXh9YH1cbiAgICAgICAgICAgICAgY2hlY2tlZD17Y2hlY2tlZH1cbiAgICAgICAgICAgICAgZGlzYWJsZWQ9e2Rpc2FibGVkIHx8IGl0ZW1EaXNhYmxlZCB8fCByZWFkb25seX1cbiAgICAgICAgICAgICAgYXV0b0ZvY3VzPXthdXRvZm9jdXMgJiYgaW5kZXggPT09IDB9XG4gICAgICAgICAgICAgIG9uQ2hhbmdlPXtldmVudCA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgYWxsID0gZW51bU9wdGlvbnMubWFwKCh7IHZhbHVlIH0pID0+IHZhbHVlKTtcbiAgICAgICAgICAgICAgICBpZiAoZXZlbnQudGFyZ2V0LmNoZWNrZWQpIHtcbiAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlKHNlbGVjdFZhbHVlKG9wdGlvbi52YWx1ZSwgdmFsdWUsIGFsbCkpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICBvbkNoYW5nZShkZXNlbGVjdFZhbHVlKG9wdGlvbi52YWx1ZSwgdmFsdWUpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAvPlxuICAgICAgICAgICAgPHNwYW4+e29wdGlvbi5sYWJlbH08L3NwYW4+XG4gICAgICAgICAgPC9zcGFuPlxuICAgICAgICApO1xuICAgICAgICByZXR1cm4gaW5saW5lID8gKFxuICAgICAgICAgIDxsYWJlbCBrZXk9e2luZGV4fSBjbGFzc05hbWU9e2BjaGVja2JveC1pbmxpbmUgJHtkaXNhYmxlZENsc31gfT5cbiAgICAgICAgICAgIHtjaGVja2JveH1cbiAgICAgICAgICA8L2xhYmVsPlxuICAgICAgICApIDogKFxuICAgICAgICAgIDxkaXYga2V5PXtpbmRleH0gY2xhc3NOYW1lPXtgY2hlY2tib3ggJHtkaXNhYmxlZENsc31gfT5cbiAgICAgICAgICAgIDxsYWJlbD57Y2hlY2tib3h9PC9sYWJlbD5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKTtcbiAgICAgIH0pfVxuICAgIDwvZGl2PlxuICApO1xufVxuXG5DaGVja2JveGVzV2lkZ2V0LmRlZmF1bHRQcm9wcyA9IHtcbiAgYXV0b2ZvY3VzOiBmYWxzZSxcbiAgb3B0aW9uczoge1xuICAgIGlubGluZTogZmFsc2UsXG4gIH0sXG59O1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIENoZWNrYm94ZXNXaWRnZXQucHJvcFR5cGVzID0ge1xuICAgIHNjaGVtYTogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICAgIGlkOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gICAgb3B0aW9uczogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICAgIGVudW1PcHRpb25zOiBQcm9wVHlwZXMuYXJyYXksXG4gICAgICBpbmxpbmU6IFByb3BUeXBlcy5ib29sLFxuICAgIH0pLmlzUmVxdWlyZWQsXG4gICAgdmFsdWU6IFByb3BUeXBlcy5hbnksXG4gICAgcmVxdWlyZWQ6IFByb3BUeXBlcy5ib29sLFxuICAgIHJlYWRvbmx5OiBQcm9wVHlwZXMuYm9vbCxcbiAgICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG4gICAgbXVsdGlwbGU6IFByb3BUeXBlcy5ib29sLFxuICAgIGF1dG9mb2N1czogUHJvcFR5cGVzLmJvb2wsXG4gICAgb25DaGFuZ2U6IFByb3BUeXBlcy5mdW5jLFxuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBDaGVja2JveGVzV2lkZ2V0O1xuIl19