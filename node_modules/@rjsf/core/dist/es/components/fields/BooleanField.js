function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React from "react";
import * as types from "../../types";
import { getWidget, getUiOptions, optionsList } from "../../utils";

function BooleanField(props) {
  var schema = props.schema,
      name = props.name,
      uiSchema = props.uiSchema,
      idSchema = props.idSchema,
      formData = props.formData,
      registry = props.registry,
      required = props.required,
      disabled = props.disabled,
      readonly = props.readonly,
      autofocus = props.autofocus,
      onChange = props.onChange,
      onFocus = props.onFocus,
      onBlur = props.onBlur,
      rawErrors = props.rawErrors;
  var title = schema.title;
  var widgets = registry.widgets,
      formContext = registry.formContext,
      fields = registry.fields;

  var _getUiOptions = getUiOptions(uiSchema),
      _getUiOptions$widget = _getUiOptions.widget,
      widget = _getUiOptions$widget === void 0 ? "checkbox" : _getUiOptions$widget,
      options = _objectWithoutProperties(_getUiOptions, ["widget"]);

  var Widget = getWidget(schema, widget, widgets);
  var enumOptions;

  if (Array.isArray(schema.oneOf)) {
    enumOptions = optionsList({
      oneOf: schema.oneOf.map(function (option) {
        return _objectSpread({}, option, {
          title: option.title || (option["const"] === true ? "Yes" : "No")
        });
      })
    });
  } else {
    enumOptions = optionsList({
      "enum": schema["enum"] || [true, false],
      enumNames: schema.enumNames || (schema["enum"] && schema["enum"][0] === false ? ["No", "Yes"] : ["Yes", "No"])
    });
  }

  return (
    /*#__PURE__*/
    React.createElement(Widget, {
      options: _objectSpread({}, options, {
        enumOptions: enumOptions
      }),
      schema: schema,
      uiSchema: uiSchema,
      id: idSchema && idSchema.$id,
      onChange: onChange,
      onFocus: onFocus,
      onBlur: onBlur,
      label: title === undefined ? name : title,
      value: formData,
      required: required,
      disabled: disabled,
      readonly: readonly,
      registry: registry,
      formContext: formContext,
      autofocus: autofocus,
      rawErrors: rawErrors,
      DescriptionField: fields.DescriptionField
    })
  );
}

if (process.env.NODE_ENV !== "production") {
  BooleanField.propTypes = types.fieldProps;
}

BooleanField.defaultProps = {
  uiSchema: {},
  disabled: false,
  readonly: false,
  autofocus: false
};
export default BooleanField;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL2ZpZWxkcy9Cb29sZWFuRmllbGQuanMiXSwibmFtZXMiOlsiUmVhY3QiLCJ0eXBlcyIsImdldFdpZGdldCIsImdldFVpT3B0aW9ucyIsIm9wdGlvbnNMaXN0IiwiQm9vbGVhbkZpZWxkIiwicHJvcHMiLCJzY2hlbWEiLCJuYW1lIiwidWlTY2hlbWEiLCJpZFNjaGVtYSIsImZvcm1EYXRhIiwicmVnaXN0cnkiLCJyZXF1aXJlZCIsImRpc2FibGVkIiwicmVhZG9ubHkiLCJhdXRvZm9jdXMiLCJvbkNoYW5nZSIsIm9uRm9jdXMiLCJvbkJsdXIiLCJyYXdFcnJvcnMiLCJ0aXRsZSIsIndpZGdldHMiLCJmb3JtQ29udGV4dCIsImZpZWxkcyIsIndpZGdldCIsIm9wdGlvbnMiLCJXaWRnZXQiLCJlbnVtT3B0aW9ucyIsIkFycmF5IiwiaXNBcnJheSIsIm9uZU9mIiwibWFwIiwib3B0aW9uIiwiZW51bU5hbWVzIiwiJGlkIiwidW5kZWZpbmVkIiwiRGVzY3JpcHRpb25GaWVsZCIsInByb2Nlc3MiLCJlbnYiLCJOT0RFX0VOViIsInByb3BUeXBlcyIsImZpZWxkUHJvcHMiLCJkZWZhdWx0UHJvcHMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUEsT0FBT0EsS0FBUCxNQUFrQixPQUFsQjtBQUNBLE9BQU8sS0FBS0MsS0FBWixNQUF1QixhQUF2QjtBQUVBLFNBQVNDLFNBQVQsRUFBb0JDLFlBQXBCLEVBQWtDQyxXQUFsQyxRQUFxRCxhQUFyRDs7QUFFQSxTQUFTQyxZQUFULENBQXNCQyxLQUF0QixFQUE2QjtBQUFBLE1BRXpCQyxNQUZ5QixHQWdCdkJELEtBaEJ1QixDQUV6QkMsTUFGeUI7QUFBQSxNQUd6QkMsSUFIeUIsR0FnQnZCRixLQWhCdUIsQ0FHekJFLElBSHlCO0FBQUEsTUFJekJDLFFBSnlCLEdBZ0J2QkgsS0FoQnVCLENBSXpCRyxRQUp5QjtBQUFBLE1BS3pCQyxRQUx5QixHQWdCdkJKLEtBaEJ1QixDQUt6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SyxFQUFFVixRQVRUO0FBVUUsTUFBQSxRQUFRLEVBQUVFLFFBVlo7QUFXRSxNQUFBLFFBQVEsRUFBRUMsUUFYWjtBQVlFLE1BQUEsUUFBUSxFQUFFQyxRQVpaO0FBYUUsTUFBQSxRQUFRLEVBQUVILFFBYlo7QUFjRSxNQUFBLFdBQVcsRUFBRVcsV0FkZjtBQWVFLE1BQUEsU0FBUyxFQUFFUCxTQWZiO0FBZ0JFLE1BQUEsU0FBUyxFQUFFSSxTQWhCYjtBQWlCRSxNQUFBLGdCQUFnQixFQUFFSSxNQUFNLENBQUNhO0FBakIzQjtBQURGO0FBcUJEOztBQUVELElBQUlDLE9BQU8sQ0FBQ0MsR0FBUixDQUFZQyxRQUFaLEtBQXlCLFlBQTdCLEVBQTJDO0FBQ3pDbkMsRUFBQUEsWUFBWSxDQUFDb0MsU0FBYixHQUF5QnhDLEtBQUssQ0FBQ3lDLFVBQS9CO0FBQ0Q7O0FBRURyQyxZQUFZLENBQUNzQyxZQUFiLEdBQTRCO0FBQzFCbEMsRUFBQUEsUUFBUSxFQUFFLEVBRGdCO0FBRTFCSyxFQUFBQSxRQUFRLEVBQUUsS0FGZ0I7QUFHMUJDLEVBQUFBLFFBQVEsRUFBRSxLQUhnQjtBQUkxQkMsRUFBQUEsU0FBUyxFQUFFO0FBSmUsQ0FBNUI7QUFPQSxlQUFlWCxZQUFmIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0ICogYXMgdHlwZXMgZnJvbSBcIi4uLy4uL3R5cGVzXCI7XG5cbmltcG9ydCB7IGdldFdpZGdldCwgZ2V0VWlPcHRpb25zLCBvcHRpb25zTGlzdCB9IGZyb20gXCIuLi8uLi91dGlsc1wiO1xuXG5mdW5jdGlvbiBCb29sZWFuRmllbGQocHJvcHMpIHtcbiAgY29uc3Qge1xuICAgIHNjaGVtYSxcbiAgICBuYW1lLFxuICAgIHVpU2NoZW1hLFxuICAgIGlkU2NoZW1hLFxuICAgIGZvcm1EYXRhLFxuICAgIHJlZ2lzdHJ5LFxuICAgIHJlcXVpcmVkLFxuICAgIGRpc2FibGVkLFxuICAgIHJlYWRvbmx5LFxuICAgIGF1dG9mb2N1cyxcbiAgICBvbkNoYW5nZSxcbiAgICBvbkZvY3VzLFxuICAgIG9uQmx1cixcbiAgICByYXdFcnJvcnMsXG4gIH0gPSBwcm9wcztcbiAgY29uc3QgeyB0aXRsZSB9ID0gc2NoZW1hO1xuICBjb25zdCB7IHdpZGdldHMsIGZvcm1Db250ZXh0LCBmaWVsZHMgfSA9IHJlZ2lzdHJ5O1xuICBjb25zdCB7IHdpZGdldCA9IFwiY2hlY2tib3hcIiwgLi4ub3B0aW9ucyB9ID0gZ2V0VWlPcHRpb25zKHVpU2NoZW1hKTtcbiAgY29uc3QgV2lkZ2V0ID0gZ2V0V2lkZ2V0KHNjaGVtYSwgd2lkZ2V0LCB3aWRnZXRzKTtcblxuICBsZXQgZW51bU9wdGlvbnM7XG5cbiAgaWYgKEFycmF5LmlzQXJyYXkoc2NoZW1hLm9uZU9mKSkge1xuICAgIGVudW1PcHRpb25zID0gb3B0aW9uc0xpc3Qoe1xuICAgICAgb25lT2Y6IHNjaGVtYS5vbmVPZi5tYXAob3B0aW9uID0+ICh7XG4gICAgICAgIC4uLm9wdGlvbixcbiAgICAgICAgdGl0bGU6IG9wdGlvbi50aXRsZSB8fCAob3B0aW9uLmNvbnN0ID09PSB0cnVlID8gXCJZZXNcIiA6IFwiTm9cIiksXG4gICAgICB9KSksXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgZW51bU9wdGlvbnMgPSBvcHRpb25zTGlzdCh7XG4gICAgICBlbnVtOiBzY2hlbWEuZW51bSB8fCBbdHJ1ZSwgZmFsc2VdLFxuICAgICAgZW51bU5hbWVzOlxuICAgICAgICBzY2hlbWEuZW51bU5hbWVzIHx8XG4gICAgICAgIChzY2hlbWEuZW51bSAmJiBzY2hlbWEuZW51bVswXSA9PT0gZmFsc2VcbiAgICAgICAgICA/IFtcIk5vXCIsIFwiWWVzXCJdXG4gICAgICAgICAgOiBbXCJZZXNcIiwgXCJOb1wiXSksXG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gKFxuICAgIDxXaWRnZXRcbiAgICAgIG9wdGlvbnM9e3sgLi4ub3B0aW9ucywgZW51bU9wdGlvbnMgfX1cbiAgICAgIHNjaGVtYT17c2NoZW1hfVxuICAgICAgdWlTY2hlbWE9e3VpU2NoZW1hfVxuICAgICAgaWQ9e2lkU2NoZW1hICYmIGlkU2NoZW1hLiRpZH1cbiAgICAgIG9uQ2hhbmdlPXtvbkNoYW5nZX1cbiAgICAgIG9uRm9jdXM9e29uRm9jdXN9XG4gICAgICBvbkJsdXI9e29uQmx1cn1cbiAgICAgIGxhYmVsPXt0aXRsZSA9PT0gdW5kZWZpbmVkID8gbmFtZSA6IHRpdGxlfVxuICAgICAgdmFsdWU9e2Zvcm1EYXRhfVxuICAgICAgcmVxdWlyZWQ9e3JlcXVpcmVkfVxuICAgICAgZGlzYWJsZWQ9e2Rpc2FibGVkfVxuICAgICAgcmVhZG9ubHk9e3JlYWRvbmx5fVxuICAgICAgcmVnaXN0cnk9e3JlZ2lzdHJ5fVxuICAgICAgZm9ybUNvbnRleHQ9e2Zvcm1Db250ZXh0fVxuICAgICAgYXV0b2ZvY3VzPXthdXRvZm9jdXN9XG4gICAgICByYXdFcnJvcnM9e3Jhd0Vycm9yc31cbiAgICAgIERlc2NyaXB0aW9uRmllbGQ9e2ZpZWxkcy5EZXNjcmlwdGlvbkZpZWxkfVxuICAgIC8+XG4gICk7XG59XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgQm9vbGVhbkZpZWxkLnByb3BUeXBlcyA9IHR5cGVzLmZpZWxkUHJvcHM7XG59XG5cbkJvb2xlYW5GaWVsZC5kZWZhdWx0UHJvcHMgPSB7XG4gIHVpU2NoZW1hOiB7fSxcbiAgZGlzYWJsZWQ6IGZhbHNlLFxuICByZWFkb25seTogZmFsc2UsXG4gIGF1dG9mb2N1czogZmFsc2UsXG59O1xuXG5leHBvcnQgZGVmYXVsdCBCb29sZWFuRmllbGQ7XG4iXX0=