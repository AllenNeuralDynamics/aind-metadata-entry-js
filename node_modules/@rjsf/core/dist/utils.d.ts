export function canExpand(schema: any, uiSchema: any, formData: any): any;
export function getSchemaType(schema: any): any;
export function getWidget(schema: any, widget: any, registeredWidgets?: {}): any;
export function hasWidget(schema: any, widget: any, registeredWidgets?: {}): boolean;
export function getDefaultFormState(_schema: any, formData: any, rootSchema?: {}, includeUndefinedValues?: boolean): any;
/**
 * When merging defaults and form data, we want to merge in this specific way:
 * - objects are deeply merged
 * - arrays are merged in such a way that:
 *   - when the array is set in form data, only array entries set in form data
 *     are deeply merged; additional entries from the defaults are ignored
 *   - when the array is not set in form data, the default is copied over
 * - scalars are overwritten/set by form data
 */
export function mergeDefaultsWithFormData(defaults: any, formData: any): any;
export function getUiOptions(uiSchema: any): {};
export function getSubmitButtonOptions(uiSchema: any): any;
export function getDisplayLabel(schema: any, uiSchema: any, rootSchema: any): any;
export function isObject(thing: any): boolean;
export function mergeObjects(obj1: any, obj2: any, concatArrays?: boolean): any;
export function asNumber(value: any): any;
export function orderProperties(properties: any, order: any): any;
/**
 * This function checks if the given schema matches a single
 * constant value.
 */
export function isConstant(schema: any): any;
export function toConstant(schema: any): any;
export function isSelect(_schema: any, rootSchema?: {}): boolean;
export function isMultiSelect(schema: any, rootSchema?: {}): boolean;
export function isFilesArray(schema: any, uiSchema: any, rootSchema?: {}): boolean;
export function isFixedItems(schema: any): any;
export function isCustomWidget(uiSchema: any): boolean;
export function allowAdditionalItems(schema: any): boolean;
export function optionsList(schema: any): any;
export function findSchemaDefinition($ref: any, rootSchema?: {}): any;
export function stubExistingAdditionalProperties(schema: any, rootSchema?: {}, formData?: {}): any;
/**
 * Resolves references and dependencies within a schema and its 'allOf' children.
 *
 * Called internally by retrieveSchema.
 */
export function resolveSchema(schema: any, rootSchema?: {}, formData?: {}): any;
export function retrieveSchema(schema: any, rootSchema?: {}, formData?: {}): any;
export function mergeSchemas(obj1: any, obj2: any): any;
export function deepEquals(a: any, b: any, ca?: any[], cb?: any[]): any;
export function shouldRender(comp: any, nextProps: any, nextState: any): boolean;
export function toIdSchema(schema: any, id: any, rootSchema: any, formData?: {}, idPrefix?: string, idSeparator?: string): any;
export function toPathSchema(schema: any, name: string | undefined, rootSchema: any, formData?: {}): any;
export function parseDateString(dateString: any, includeTime?: boolean): {
    year: number;
    month: number;
    day: number;
    hour: number;
    minute: number;
    second: number;
};
export function toDateString({ year, month, day, hour, minute, second }: {
    year: any;
    month: any;
    day: any;
    hour?: number | undefined;
    minute?: number | undefined;
    second?: number | undefined;
}, time?: boolean): string;
export function utcToLocal(jsonDate: any): string;
export function localToUTC(dateString: any): string | undefined;
export function pad(num: any, size: any): string;
export function dataURItoBlob(dataURI: any): {
    blob: Blob;
    name: any;
};
export function rangeSpec(schema: any): {
    step: any;
    min: any;
    max: any;
};
export function getMatchingOption(formData: any, options: any, rootSchema: any): number;
export function schemaRequiresTrueValue(schema: any): any;
export const ADDITIONAL_PROPERTY_FLAG: "__additional_property";
export function guessType(value: any): "array" | "string" | "null" | "boolean" | "number" | "object";
