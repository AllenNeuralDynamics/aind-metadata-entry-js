export default NumberField;
/**
 * The NumberField class has some special handling for dealing with trailing
 * decimal points and/or zeroes. This logic is designed to allow trailing values
 * to be visible in the input element, but not be represented in the
 * corresponding form data.
 *
 * The algorithm is as follows:
 *
 * 1. When the input value changes the value is cached in the component state
 *
 * 2. The value is then normalized, removing trailing decimal points and zeros,
 *    then passed to the "onChange" callback
 *
 * 3. When the component is rendered, the formData value is checked against the
 *    value cached in the state. If it matches the cached value, the cached
 *    value is passed to the input instead of the formData value
 */
declare class NumberField extends React.Component<any, any, any> {
    constructor(props: any);
    handleChange: (value: any) => void;
}
declare namespace NumberField {
    export const propTypes: {
        autofocus: import("prop-types").Requireable<boolean>;
        disabled: import("prop-types").Requireable<boolean>;
        errorSchema: import("prop-types").Requireable<object>;
        formData: import("prop-types").Requireable<any>;
        idSchema: import("prop-types").Requireable<object>;
        onBlur: import("prop-types").Requireable<(...args: any[]) => any>;
        onChange: import("prop-types").Validator<(...args: any[]) => any>;
        onFocus: import("prop-types").Requireable<(...args: any[]) => any>;
        rawErrors: import("prop-types").Requireable<(string | null | undefined)[]>;
        readonly: import("prop-types").Requireable<boolean>;
        registry: import("prop-types").Validator<import("prop-types").InferProps<{
            ArrayFieldTemplate: import("prop-types").Requireable<import("prop-types").ReactComponentLike>;
            FieldTemplate: import("prop-types").Requireable<import("prop-types").ReactComponentLike>;
            ObjectFieldTemplate: import("prop-types").Requireable<import("prop-types").ReactComponentLike>;
            definitions: import("prop-types").Validator<object>;
            rootSchema: import("prop-types").Requireable<object>;
            fields: import("prop-types").Validator<{
                [x: string]: string | ((props: any, context?: any) => any) | (new (props: any, context?: any) => any) | null | undefined;
            }>;
            formContext: import("prop-types").Validator<object>;
            widgets: import("prop-types").Validator<{
                [x: string]: object | null | undefined;
            }>;
        }>>;
        required: import("prop-types").Requireable<boolean>;
        schema: import("prop-types").Validator<object>;
        uiSchema: import("prop-types").Requireable<import("prop-types").InferProps<{
            "ui:options": import("prop-types").Requireable<import("prop-types").InferProps<{
                addable: import("prop-types").Requireable<boolean>;
                orderable: import("prop-types").Requireable<boolean>;
                removable: import("prop-types").Requireable<boolean>;
            }>>;
        }>>;
    };
    export namespace defaultProps {
        export const uiSchema: {};
    }
}
import React from "react";
