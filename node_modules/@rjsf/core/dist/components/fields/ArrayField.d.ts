export default ArrayField;
declare class ArrayField extends React.Component<any, any, any> {
    static defaultProps: {
        uiSchema: {};
        formData: never[];
        idSchema: {};
        required: boolean;
        disabled: boolean;
        readonly: boolean;
        autofocus: boolean;
    };
    static getDerivedStateFromProps(nextProps: any, prevState: any): {
        updatedKeyedFormData: boolean;
        keyedFormData?: undefined;
    } | {
        keyedFormData: any;
        updatedKeyedFormData?: undefined;
    };
    constructor(props: any);
    get itemTitle(): any;
    isItemRequired(itemSchema: any): boolean;
    canAddItem(formItems: any): any;
    _getNewFormDataRow: () => any;
    onAddClick: (event: any) => void;
    onAddIndexClick: (index: any) => (event: any) => void;
    onDropIndexClick: (index: any) => (event: any) => void;
    onReorderClick: (index: any, newIndex: any) => (event: any) => void;
    onChangeForIndex: (index: any) => (value: any, errorSchema: any) => void;
    onSelectChange: (value: any) => void;
    renderNormalArray(): JSX.Element;
    renderCustomWidget(): JSX.Element;
    renderMultiSelect(): JSX.Element;
    renderFiles(): JSX.Element;
    renderFixedArray(): JSX.Element;
    renderArrayFieldItem(props: any): {
        children: JSX.Element;
        className: string;
        disabled: any;
        hasToolbar: any;
        hasMoveUp: any;
        hasMoveDown: any;
        hasRemove: any;
        index: any;
        key: any;
        onAddIndexClick: (index: any) => (event: any) => void;
        onDropIndexClick: (index: any) => (event: any) => void;
        onReorderClick: (index: any, newIndex: any) => (event: any) => void;
        readonly: any;
    };
}
import React from "react";
