export default AnyOfField;
declare class AnyOfField extends React.Component<any, any, any> {
    constructor(props: any);
    getMatchingOption(formData: any, options: any): any;
    onOptionChange: (option: any) => void;
}
declare namespace AnyOfField {
    export const defaultProps: {
        disabled: boolean;
        readonly: boolean;
        hideError: boolean;
        errorSchema: {};
        idSchema: {};
        uiSchema: {};
    };
    export namespace propTypes {
        export const options: PropTypes.Validator<(object | null | undefined)[]>;
        export const baseType: PropTypes.Requireable<string>;
        export const uiSchema: PropTypes.Requireable<object>;
        export const idSchema: PropTypes.Requireable<object>;
        export const formData: PropTypes.Requireable<any>;
        export const errorSchema: PropTypes.Requireable<object>;
        export const registry: PropTypes.Validator<PropTypes.InferProps<{
            ArrayFieldTemplate: PropTypes.Requireable<PropTypes.ReactComponentLike>;
            FieldTemplate: PropTypes.Requireable<PropTypes.ReactComponentLike>;
            ObjectFieldTemplate: PropTypes.Requireable<PropTypes.ReactComponentLike>;
            definitions: PropTypes.Validator<object>;
            rootSchema: PropTypes.Requireable<object>;
            fields: PropTypes.Validator<{
                [x: string]: string | ((props: any, context?: any) => any) | (new (props: any, context?: any) => any) | null | undefined;
            }>;
            formContext: PropTypes.Validator<object>;
            widgets: PropTypes.Validator<{
                [x: string]: object | null | undefined;
            }>;
        }>>;
    }
}
import React from "react";
import PropTypes from "prop-types";
