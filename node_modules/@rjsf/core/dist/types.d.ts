export const registry: PropTypes.Requireable<PropTypes.InferProps<{
    ArrayFieldTemplate: PropTypes.Requireable<PropTypes.ReactComponentLike>;
    FieldTemplate: PropTypes.Requireable<PropTypes.ReactComponentLike>;
    ObjectFieldTemplate: PropTypes.Requireable<PropTypes.ReactComponentLike>;
    definitions: PropTypes.Validator<object>;
    rootSchema: PropTypes.Requireable<object>;
    fields: PropTypes.Validator<{
        [x: string]: string | ((props: any, context?: any) => any) | (new (props: any, context?: any) => any) | null | undefined;
    }>;
    formContext: PropTypes.Validator<object>;
    widgets: PropTypes.Validator<{
        [x: string]: object | null | undefined;
    }>;
}>>;
export const fieldProps: {
    autofocus: PropTypes.Requireable<boolean>;
    disabled: PropTypes.Requireable<boolean>;
    errorSchema: PropTypes.Requireable<object>;
    formData: PropTypes.Requireable<any>;
    idSchema: PropTypes.Requireable<object>;
    onBlur: PropTypes.Requireable<(...args: any[]) => any>;
    onChange: PropTypes.Validator<(...args: any[]) => any>;
    onFocus: PropTypes.Requireable<(...args: any[]) => any>;
    rawErrors: PropTypes.Requireable<(string | null | undefined)[]>;
    readonly: PropTypes.Requireable<boolean>;
    registry: PropTypes.Validator<PropTypes.InferProps<{
        ArrayFieldTemplate: PropTypes.Requireable<PropTypes.ReactComponentLike>;
        FieldTemplate: PropTypes.Requireable<PropTypes.ReactComponentLike>;
        ObjectFieldTemplate: PropTypes.Requireable<PropTypes.ReactComponentLike>;
        definitions: PropTypes.Validator<object>;
        rootSchema: PropTypes.Requireable<object>;
        fields: PropTypes.Validator<{
            [x: string]: string | ((props: any, context?: any) => any) | (new (props: any, context?: any) => any) | null | undefined;
        }>;
        formContext: PropTypes.Validator<object>;
        widgets: PropTypes.Validator<{
            [x: string]: object | null | undefined;
        }>;
    }>>;
    required: PropTypes.Requireable<boolean>;
    schema: PropTypes.Validator<object>;
    uiSchema: PropTypes.Requireable<PropTypes.InferProps<{
        "ui:options": PropTypes.Requireable<PropTypes.InferProps<{
            addable: PropTypes.Requireable<boolean>;
            orderable: PropTypes.Requireable<boolean>;
            removable: PropTypes.Requireable<boolean>;
        }>>;
    }>>;
};
import PropTypes from "prop-types";
