function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React from "react";
import * as types from "../../types";
import { getWidget, getUiOptions, isSelect, optionsList, hasWidget } from "../../utils";

function StringField(props) {
  var schema = props.schema,
      name = props.name,
      uiSchema = props.uiSchema,
      idSchema = props.idSchema,
      formData = props.formData,
      required = props.required,
      disabled = props.disabled,
      readonly = props.readonly,
      autofocus = props.autofocus,
      onChange = props.onChange,
      onBlur = props.onBlur,
      onFocus = props.onFocus,
      registry = props.registry,
      rawErrors = props.rawErrors;
  var title = schema.title,
      format = schema.format;
  var widgets = registry.widgets,
      formContext = registry.formContext;
  var enumOptions = isSelect(schema) && optionsList(schema);
  var defaultWidget = enumOptions ? "select" : "text";

  if (format && hasWidget(schema, format, widgets)) {
    defaultWidget = format;
  }

  var _getUiOptions = getUiOptions(uiSchema),
      _getUiOptions$widget = _getUiOptions.widget,
      widget = _getUiOptions$widget === void 0 ? defaultWidget : _getUiOptions$widget,
      _getUiOptions$placeho = _getUiOptions.placeholder,
      placeholder = _getUiOptions$placeho === void 0 ? "" : _getUiOptions$placeho,
      options = _objectWithoutProperties(_getUiOptions, ["widget", "placeholder"]);

  var Widget = getWidget(schema, widget, widgets);
  return (
    /*#__PURE__*/
    React.createElement(Widget, {
      options: _objectSpread({}, options, {
        enumOptions: enumOptions
      }),
      schema: schema,
      uiSchema: uiSchema,
      id: idSchema && idSchema.$id,
      label: title === undefined ? name : title,
      value: formData,
      onChange: onChange,
      onBlur: onBlur,
      onFocus: onFocus,
      required: required,
      disabled: disabled,
      readonly: readonly,
      formContext: formContext,
      autofocus: autofocus,
      registry: registry,
      placeholder: placeholder,
      rawErrors: rawErrors
    })
  );
}

if (process.env.NODE_ENV !== "production") {
  StringField.propTypes = types.fieldProps;
}

StringField.defaultProps = {
  uiSchema: {},
  disabled: false,
  readonly: false,
  autofocus: false
};
export default StringField;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21wb25lbnRzL2ZpZWxkcy9TdHJpbmdGaWVsZC5qcyJdLCJuYW1lcyI6WyJSZWFjdCIsInR5cGVzIiwiZ2V0V2lkZ2V0IiwiZ2V0VWlPcHRpb25zIiwiaXNTZWxlY3QiLCJvcHRpb25zTGlzdCIsImhhc1dpZGdldCIsIlN0cmluZ0ZpZWxkIiwicHJvcHMiLCJzY2hlbWEiLCJuYW1lIiwidWlTY2hlbWEiLCJpZFNjaGVtYSIsImZvcm1EYXRhIiwicmVxdWlyZWQiLCJkaXNhYmxlZCIsInJlYWRvbmx5IiwiYXV0b2ZvY3VzIiwib25DaGFuZ2UiLCJvbkJsdXIiLCJvbkZvY3VzIiwicmVnaXN0cnkiLCJyYXdFcnJvcnMiLCJ0aXRsZSIsImZvcm1hdCIsIndpZGdldHMiLCJmb3JtQ29udGV4dCIsImVudW1PcHRpb25zIiwiZGVmYXVsdFdpZGdldCIsIndpZGdldCIsInBsYWNlaG9sZGVyIiwib3B0aW9ucyIsIldpZGdldCIsIiRpZCIsInVuZGVmaW5lZCIsInByb2Nlc3MiLCJlbnYiLCJOT0RFX0VOViIsInByb3BUeXBlcyIsImZpZWxkUHJvcHMiLCJkZWZhdWx0UHJvcHMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUEsT0FBT0EsS0FBUCxNQUFrQixPQUFsQjtBQUNBLE9BQU8sS0FBS0MsS0FBWixNQUF1QixhQUF2QjtBQUVBLFNBQ0VDLFNBREYsRUFFRUMsWUFGRixFQUdFQyxRQUhGLEVBSUVDLFdBSkYsRUFLRUMsU0FMRixRQU1PLGFBTlA7O0FBUUEsU0FBU0MsV0FBVCxDQUFxQkMsS0FBckIsRUFBNEI7QUFBQSxNQUV4QkMsTUFGd0IsR0FnQnRCRCxLQWhCc0IsQ0FFeEJDLE1BRndCO0FBQUEsTUFHeEJDLElBSHdCLEdBZ0J0QkYsS0FoQnNCLENBR3hCRSxJQUh3QjtBQUFBLE1BSXhCQyxRQUp3QixHQWdCdEJILEtBaEJzQixDQUl4QkcsUUFKd0I7QUFBQSxNQUt4QkMsUUFMd0IsR0FnQnRCSixLQWhCc0IsQ0FLeEJJLFFBTHdC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QyxLQUFLLENBQUNzQyxVQUE5QjtBQUNEOztBQUVEaEMsV0FBVyxDQUFDaUMsWUFBWixHQUEyQjtBQUN6QjdCLEVBQUFBLFFBQVEsRUFBRSxFQURlO0FBRXpCSSxFQUFBQSxRQUFRLEVBQUUsS0FGZTtBQUd6QkMsRUFBQUEsUUFBUSxFQUFFLEtBSGU7QUFJekJDLEVBQUFBLFNBQVMsRUFBRTtBQUpjLENBQTNCO0FBT0EsZUFBZVYsV0FBZiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCAqIGFzIHR5cGVzIGZyb20gXCIuLi8uLi90eXBlc1wiO1xuXG5pbXBvcnQge1xuICBnZXRXaWRnZXQsXG4gIGdldFVpT3B0aW9ucyxcbiAgaXNTZWxlY3QsXG4gIG9wdGlvbnNMaXN0LFxuICBoYXNXaWRnZXQsXG59IGZyb20gXCIuLi8uLi91dGlsc1wiO1xuXG5mdW5jdGlvbiBTdHJpbmdGaWVsZChwcm9wcykge1xuICBjb25zdCB7XG4gICAgc2NoZW1hLFxuICAgIG5hbWUsXG4gICAgdWlTY2hlbWEsXG4gICAgaWRTY2hlbWEsXG4gICAgZm9ybURhdGEsXG4gICAgcmVxdWlyZWQsXG4gICAgZGlzYWJsZWQsXG4gICAgcmVhZG9ubHksXG4gICAgYXV0b2ZvY3VzLFxuICAgIG9uQ2hhbmdlLFxuICAgIG9uQmx1cixcbiAgICBvbkZvY3VzLFxuICAgIHJlZ2lzdHJ5LFxuICAgIHJhd0Vycm9ycyxcbiAgfSA9IHByb3BzO1xuICBjb25zdCB7IHRpdGxlLCBmb3JtYXQgfSA9IHNjaGVtYTtcbiAgY29uc3QgeyB3aWRnZXRzLCBmb3JtQ29udGV4dCB9ID0gcmVnaXN0cnk7XG4gIGNvbnN0IGVudW1PcHRpb25zID0gaXNTZWxlY3Qoc2NoZW1hKSAmJiBvcHRpb25zTGlzdChzY2hlbWEpO1xuICBsZXQgZGVmYXVsdFdpZGdldCA9IGVudW1PcHRpb25zID8gXCJzZWxlY3RcIiA6IFwidGV4dFwiO1xuICBpZiAoZm9ybWF0ICYmIGhhc1dpZGdldChzY2hlbWEsIGZvcm1hdCwgd2lkZ2V0cykpIHtcbiAgICBkZWZhdWx0V2lkZ2V0ID0gZm9ybWF0O1xuICB9XG4gIGNvbnN0IHsgd2lkZ2V0ID0gZGVmYXVsdFdpZGdldCwgcGxhY2Vob2xkZXIgPSBcIlwiLCAuLi5vcHRpb25zIH0gPSBnZXRVaU9wdGlvbnMoXG4gICAgdWlTY2hlbWFcbiAgKTtcbiAgY29uc3QgV2lkZ2V0ID0gZ2V0V2lkZ2V0KHNjaGVtYSwgd2lkZ2V0LCB3aWRnZXRzKTtcbiAgcmV0dXJuIChcbiAgICA8V2lkZ2V0XG4gICAgICBvcHRpb25zPXt7IC4uLm9wdGlvbnMsIGVudW1PcHRpb25zIH19XG4gICAgICBzY2hlbWE9e3NjaGVtYX1cbiAgICAgIHVpU2NoZW1hPXt1aVNjaGVtYX1cbiAgICAgIGlkPXtpZFNjaGVtYSAmJiBpZFNjaGVtYS4kaWR9XG4gICAgICBsYWJlbD17dGl0bGUgPT09IHVuZGVmaW5lZCA/IG5hbWUgOiB0aXRsZX1cbiAgICAgIHZhbHVlPXtmb3JtRGF0YX1cbiAgICAgIG9uQ2hhbmdlPXtvbkNoYW5nZX1cbiAgICAgIG9uQmx1cj17b25CbHVyfVxuICAgICAgb25Gb2N1cz17b25Gb2N1c31cbiAgICAgIHJlcXVpcmVkPXtyZXF1aXJlZH1cbiAgICAgIGRpc2FibGVkPXtkaXNhYmxlZH1cbiAgICAgIHJlYWRvbmx5PXtyZWFkb25seX1cbiAgICAgIGZvcm1Db250ZXh0PXtmb3JtQ29udGV4dH1cbiAgICAgIGF1dG9mb2N1cz17YXV0b2ZvY3VzfVxuICAgICAgcmVnaXN0cnk9e3JlZ2lzdHJ5fVxuICAgICAgcGxhY2Vob2xkZXI9e3BsYWNlaG9sZGVyfVxuICAgICAgcmF3RXJyb3JzPXtyYXdFcnJvcnN9XG4gICAgLz5cbiAgKTtcbn1cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBTdHJpbmdGaWVsZC5wcm9wVHlwZXMgPSB0eXBlcy5maWVsZFByb3BzO1xufVxuXG5TdHJpbmdGaWVsZC5kZWZhdWx0UHJvcHMgPSB7XG4gIHVpU2NoZW1hOiB7fSxcbiAgZGlzYWJsZWQ6IGZhbHNlLFxuICByZWFkb25seTogZmFsc2UsXG4gIGF1dG9mb2N1czogZmFsc2UsXG59O1xuXG5leHBvcnQgZGVmYXVsdCBTdHJpbmdGaWVsZDtcbiJdfQ==