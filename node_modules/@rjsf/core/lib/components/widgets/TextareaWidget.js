import React from "react";
import PropTypes from "prop-types";

function TextareaWidget(props) {
  var id = props.id,
      options = props.options,
      placeholder = props.placeholder,
      value = props.value,
      required = props.required,
      disabled = props.disabled,
      readonly = props.readonly,
      autofocus = props.autofocus,
      onChange = props.onChange,
      onBlur = props.onBlur,
      onFocus = props.onFocus;

  var _onChange = function _onChange(_ref) {
    var value = _ref.target.value;
    return onChange(value === "" ? options.emptyValue : value);
  };

  return (
    /*#__PURE__*/
    React.createElement("textarea", {
      id: id,
      className: "form-control",
      value: value ? value : "",
      placeholder: placeholder,
      required: required,
      disabled: disabled,
      readOnly: readonly,
      autoFocus: autofocus,
      rows: options.rows,
      onBlur: onBlur && function (event) {
        return onBlur(id, event.target.value);
      },
      onFocus: onFocus && function (event) {
        return onFocus(id, event.target.value);
      },
      onChange: _onChange
    })
  );
}

TextareaWidget.defaultProps = {
  autofocus: false,
  options: {}
};

if (process.env.NODE_ENV !== "production") {
  TextareaWidget.propTypes = {
    schema: PropTypes.object.isRequired,
    id: PropTypes.string.isRequired,
    placeholder: PropTypes.string,
    options: PropTypes.shape({
      rows: PropTypes.number
    }),
    value: PropTypes.string,
    required: PropTypes.bool,
    disabled: PropTypes.bool,
    readonly: PropTypes.bool,
    autofocus: PropTypes.bool,
    onChange: PropTypes.func,
    onBlur: PropTypes.func,
    onFocus: PropTypes.func
  };
}

export default TextareaWidget;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3dpZGdldHMvVGV4dGFyZWFXaWRnZXQuanMiXSwibmFtZXMiOlsiUmVhY3QiLCJQcm9wVHlwZXMiLCJUZXh0YXJlYVdpZGdldCIsInByb3BzIiwiaWQiLCJvcHRpb25zIiwicGxhY2Vob2xkZXIiLCJ2YWx1ZSIsInJlcXVpcmVkIiwiZGlzYWJsZWQiLCJyZWFkb25seSIsImF1dG9mb2N1cyIsIm9uQ2hhbmdlIiwib25CbHVyIiwib25Gb2N1cyIsIl9vbkNoYW5nZSIsInRhcmdldCIsImVtcHR5VmFsdWUiLCJyb3dzIiwiZXZlbnQiLCJkZWZhdWx0UHJvcHMiLCJwcm9jZXNzIiwiZW52IiwiTk9ERV9FTlYiLCJwcm9wVHlwZXMiLCJzY2hlbWEiLCJvYmplY3QiLCJpc1JlcXVpcmVkIiwic3RyaW5nIiwic2hhcGUiLCJudW1iZXIiLCJib29sIiwiZnVuYyJdLCJtYXBwaW5ncyI6IkFBQUEsT0FBT0EsS0FBUCxNQUFrQixPQUFsQjtBQUNBLE9BQU9DLFNBQVAsTUFBc0IsWUFBdEI7O0FBRUEsU0FBU0MsY0FBVCxDQUF3QkMsS0FBeEIsRUFBK0I7QUFBQSxNQUUzQkMsRUFGMkIsR0FhekJELEtBYnlCLENBRTNCQyxFQUYyQjtBQUFBLE1BRzNCQyxPQUgyQixHQWF6QkYsS0FieUIsQ0FHM0JFLE9BSDJCO0FBQUEsTUFJM0JDLFdBSjJCLEdBYXpCSCxLQWJ5QixDQUkzQkcsV0FKMkI7QUFBQSxNQUszQkMsS0FMMkIsR0FhekJKLEtBYnlCLENBSzNCSSxLQUwyQjtBQUFBLE1BTTNCQyxRQU4yQixHQWF6QkwsS0FieUIsQ0FNM0JLLFFBTjJCO0FBQUEsTUFPM0JDLFFBUDJCLEdBYXpCTixLQWJ5QixDQU8zQk0sUUFQMkI7QUFBQSxNQVEzQkMsUUFSMkIsR0FhekJQLEtBYnlCLENBUTNCTyxRQVIyQjtBQUFBLE1BUzNCQyxTQVQyQixHQWF6QlIsS0FieUIsQ0FTM0JRLFNBVDJCO0FBQUEsTUFVM0JDLFFBVjJCLEdBYXpCVCxLQWJ5QixDQVUzQlMsUUFWMkI7QUFBQSxNQVczQkMsTUFYMkIsR0FhekJWLEtBYnlCLENBVzNCVSxNQVgyQjtBQUFBLE1BWTNCQyxPQVoyQixHQWF6QlgsS0FieUIsQ0FZM0JXLE9BWjJCOztBQWM3QixNQUFNQyxTQUFTLEdBQUcsU0FBWkEsU0FBWSxPQUEyQjtBQUFBLFFBQWRSLEtBQWMsUUFBeEJTLE1BQXdCLENBQWRULEtBQWM7QUFDM0MsV0FBT0ssUUFBUSxDQUFDTCxLQUFLLEtBQUssRUFBVixHQUFlRixPQUFPLENBQUNZLFVBQXZCLEdBQW9DVixLQUFyQyxDQUFmO0FBQ0QsR0FGRDs7QUFHQTtBQUFBO0FBQ0U7QUFDRSxNQUFBLEVBQUUsRUFBRUgsRUFETjtBQUVFLE1BQUEsU0FBUyxFQUFDLGNBRlo7QUFHRSxNQUFBLEtBQUssRUFBRUcsS0FBSyxHQUFHQSxLQUFILEdBQVcsRUFIekI7QUFJRSxNQUFBLFdBQVcsRUFBRUQsV0FKZjtBQUtFLE1BQUEsUUFBUSxFQUFFRSxRQUxaO0FBTUUsTUFBQSxRQUFRLEVBQUVDLFFBTlo7QUFPRSxNQUFBLFFBQVEsRUFBRUMsUUFQWjtBQVFFLE1BQUEsU0FBUyxFQUFFQyxTQVJiO0FBU0UsTUFBQSxJQUFJLEVBQUVOLE9BQU8sQ0FBQ2EsSUFUaEI7QUFVRSxNQUFBLE1BQU0sRUFBRUwsTUFBTSxJQUFLLFVBQUFNLEtBQUs7QUFBQSxlQUFJTixNQUFNLENBQUNULEVBQUQsRUFBS2UsS0FBSyxDQUFDSCxNQUFOLENBQWFULEtBQWxCLENBQVY7QUFBQSxPQVYxQjtBQVdFLE1BQUEsT0FBTyxFQUFFTyxPQUFPLElBQUssVUFBQUssS0FBSztBQUFBLGVBQUlMLE9BQU8sQ0FBQ1YsRUFBRCxFQUFLZSxLQUFLLENBQUNILE1BQU4sQ0FBYVQsS0FBbEIsQ0FBWDtBQUFBLE9BWDVCO0FBWUUsTUFBQSxRQUFRLEVBQUVRO0FBWlo7QUFERjtBQWdCRDs7QUFFRGIsY0FBYyxDQUFDa0IsWUFBZixHQUE4QjtBQUM1QlQsRUFBQUEsU0FBUyxFQUFFLEtBRGlCO0FBRTVCTixFQUFBQSxPQUFPLEVBQUU7QUFGbUIsQ0FBOUI7O0FBS0EsSUFBSWdCLE9BQU8sQ0FBQ0MsR0FBUixDQUFZQyxRQUFaLEtBQXlCLFlBQTdCLEVBQTJDO0FBQ3pDckIsRUFBQUEsY0FBYyxDQUFDc0IsU0FBZixHQUEyQjtBQUN6QkMsSUFBQUEsTUFBTSxFQUFFeEIsU0FBUyxDQUFDeUIsTUFBVixDQUFpQkMsVUFEQTtBQUV6QnZCLElBQUFBLEVBQUUsRUFBRUgsU0FBUyxDQUFDMkIsTUFBVixDQUFpQkQsVUFGSTtBQUd6QnJCLElBQUFBLFdBQVcsRUFBRUwsU0FBUyxDQUFDMkIsTUFIRTtBQUl6QnZCLElBQUFBLE9BQU8sRUFBRUosU0FBUyxDQUFDNEIsS0FBVixDQUFnQjtBQUN2QlgsTUFBQUEsSUFBSSxFQUFFakIsU0FBUyxDQUFDNkI7QUFETyxLQUFoQixDQUpnQjtBQU96QnZCLElBQUFBLEtBQUssRUFBRU4sU0FBUyxDQUFDMkIsTUFQUTtBQVF6QnBCLElBQUFBLFFBQVEsRUFBRVAsU0FBUyxDQUFDOEIsSUFSSztBQVN6QnRCLElBQUFBLFFBQVEsRUFBRVIsU0FBUyxDQUFDOEIsSUFUSztBQVV6QnJCLElBQUFBLFFBQVEsRUFBRVQsU0FBUyxDQUFDOEIsSUFWSztBQVd6QnBCLElBQUFBLFNBQVMsRUFBRVYsU0FBUyxDQUFDOEIsSUFYSTtBQVl6Qm5CLElBQUFBLFFBQVEsRUFBRVgsU0FBUyxDQUFDK0IsSUFaSztBQWF6Qm5CLElBQUFBLE1BQU0sRUFBRVosU0FBUyxDQUFDK0IsSUFiTztBQWN6QmxCLElBQUFBLE9BQU8sRUFBRWIsU0FBUyxDQUFDK0I7QUFkTSxHQUEzQjtBQWdCRDs7QUFFRCxlQUFlOUIsY0FBZiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSBcInByb3AtdHlwZXNcIjtcblxuZnVuY3Rpb24gVGV4dGFyZWFXaWRnZXQocHJvcHMpIHtcbiAgY29uc3Qge1xuICAgIGlkLFxuICAgIG9wdGlvbnMsXG4gICAgcGxhY2Vob2xkZXIsXG4gICAgdmFsdWUsXG4gICAgcmVxdWlyZWQsXG4gICAgZGlzYWJsZWQsXG4gICAgcmVhZG9ubHksXG4gICAgYXV0b2ZvY3VzLFxuICAgIG9uQ2hhbmdlLFxuICAgIG9uQmx1cixcbiAgICBvbkZvY3VzLFxuICB9ID0gcHJvcHM7XG4gIGNvbnN0IF9vbkNoYW5nZSA9ICh7IHRhcmdldDogeyB2YWx1ZSB9IH0pID0+IHtcbiAgICByZXR1cm4gb25DaGFuZ2UodmFsdWUgPT09IFwiXCIgPyBvcHRpb25zLmVtcHR5VmFsdWUgOiB2YWx1ZSk7XG4gIH07XG4gIHJldHVybiAoXG4gICAgPHRleHRhcmVhXG4gICAgICBpZD17aWR9XG4gICAgICBjbGFzc05hbWU9XCJmb3JtLWNvbnRyb2xcIlxuICAgICAgdmFsdWU9e3ZhbHVlID8gdmFsdWUgOiBcIlwifVxuICAgICAgcGxhY2Vob2xkZXI9e3BsYWNlaG9sZGVyfVxuICAgICAgcmVxdWlyZWQ9e3JlcXVpcmVkfVxuICAgICAgZGlzYWJsZWQ9e2Rpc2FibGVkfVxuICAgICAgcmVhZE9ubHk9e3JlYWRvbmx5fVxuICAgICAgYXV0b0ZvY3VzPXthdXRvZm9jdXN9XG4gICAgICByb3dzPXtvcHRpb25zLnJvd3N9XG4gICAgICBvbkJsdXI9e29uQmx1ciAmJiAoZXZlbnQgPT4gb25CbHVyKGlkLCBldmVudC50YXJnZXQudmFsdWUpKX1cbiAgICAgIG9uRm9jdXM9e29uRm9jdXMgJiYgKGV2ZW50ID0+IG9uRm9jdXMoaWQsIGV2ZW50LnRhcmdldC52YWx1ZSkpfVxuICAgICAgb25DaGFuZ2U9e19vbkNoYW5nZX1cbiAgICAvPlxuICApO1xufVxuXG5UZXh0YXJlYVdpZGdldC5kZWZhdWx0UHJvcHMgPSB7XG4gIGF1dG9mb2N1czogZmFsc2UsXG4gIG9wdGlvbnM6IHt9LFxufTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBUZXh0YXJlYVdpZGdldC5wcm9wVHlwZXMgPSB7XG4gICAgc2NoZW1hOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG4gICAgaWQ6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgICBwbGFjZWhvbGRlcjogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBvcHRpb25zOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgICAgcm93czogUHJvcFR5cGVzLm51bWJlcixcbiAgICB9KSxcbiAgICB2YWx1ZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICByZXF1aXJlZDogUHJvcFR5cGVzLmJvb2wsXG4gICAgZGlzYWJsZWQ6IFByb3BUeXBlcy5ib29sLFxuICAgIHJlYWRvbmx5OiBQcm9wVHlwZXMuYm9vbCxcbiAgICBhdXRvZm9jdXM6IFByb3BUeXBlcy5ib29sLFxuICAgIG9uQ2hhbmdlOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBvbkJsdXI6IFByb3BUeXBlcy5mdW5jLFxuICAgIG9uRm9jdXM6IFByb3BUeXBlcy5mdW5jLFxuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBUZXh0YXJlYVdpZGdldDtcbiJdfQ==